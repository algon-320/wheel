fn memcpy(dst: *[u64], src: *[u64]) -> () {
    let i = 0;
    loop {
        if i == dst.len {
            break;
        }

        dst[i] = src[i];
        i += 1;
    }
}

fn reverse(p: *[u64]) -> () {
    let i = 0;
    let m = p.len / 2;
    loop {
        if i > m {
            break
        }

        let tmp = p[i];
        p[i] = p[p.len - 1 - i];
        p[p.len - 1 - i] = tmp;

        i += 1;
    }
}

fn sum(a: *[u64]) -> u64 {
    let s = 0;
    let i = 0;
    loop {
        if i == a.len {
            break
        }
        s += a[i];
        i += 1;
    }
    s
}

let ARRAY: [u64; 10] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

fn main() -> u64 {
    let x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    memcpy(&x[0..10], &ARRAY[0..10]);

    reverse(&x[0..10]);
    reverse(&x[0..10]);

    sum(&x[0..5]) // 1+2+3+4+5
}
