fn memcpy(dst: *u64, src: *u64, len: u64) -> () {
    let i = 0 in
    loop {
        if i == len {
            break
        } else {
            dst[i] = src[i];
            i = i + 1;
        }
    }
}

fn reverse(p: *u64, len: u64) -> () {
    let i = 0 in
    let m = len / 2 in
    loop {
        if i > m {
            break
        } else {
            let tmp = p[i] in {
                p[i] = p[len - 1 - i];
                p[len - 1 - i] = tmp;
            };
            i = i + 1;
        }
    }
}

fn sum(a: *u64, len: u64) -> u64 {
    let s = 0 in
    let i = 0 in {
        loop {
            if i == len {
                break
            } else {
                s = s + a[i];
                i = i + 1;
            }
        };
        s
    }
}

let ARRAY: [u64; 10] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

fn main() -> u64 {
    let x = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] in
    {
        // x = ARRAY; // error
        memcpy(x, ARRAY, 10);

        reverse(x, 10);
        reverse(x, 10);

        sum(x, 5) // 1+2+3+4+5
    }
}
